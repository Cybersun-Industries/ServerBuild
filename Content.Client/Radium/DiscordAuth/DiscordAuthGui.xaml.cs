using Content.Client.Corvax;
using Content.Corvax.Interfaces.Client;
using Content.Corvax.Interfaces.Shared;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using Robust.Client.AutoGenerated;

namespace Content.Client.Radium.DiscordAuth;

[GenerateTypedNameReferences]
public sealed partial class DiscordAuthGui : Control
{
    [Dependency] private readonly IClientDiscordAuthManager _discordAuthManager = default!;
    [Dependency] private readonly ISharedDiscordAuthManager _sharedDiscordAuthManager = default!;
    [Dependency] private readonly IClientConsoleHost _consoleHost = default!;

    private float _timer;
    public DiscordAuthGui()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        LayoutContainer.SetAnchorPreset(this, LayoutContainer.LayoutPreset.Wide);

        QuitButton.OnPressed += (_) =>
        {
            _consoleHost.ExecuteCommand("quit");
        };

        UrlEdit.TextRope = new Rope.Leaf(_discordAuthManager.AuthUrl);

        OpenUrlButton.OnPressed += (_) =>
        {
            if (_discordAuthManager.AuthUrl != string.Empty)
            {
                IoCManager.Resolve<IUriOpener>().OpenUri(_discordAuthManager.AuthUrl);
            }
        };

        SkipButton.OnPressed += (_) =>
        {
            _sharedDiscordAuthManager.IsSkipped = true;
        };
    }
    public float Timer
    {
        get => _timer;
        set
        {
            WaitLabel.Text = Loc.GetString("ui-rules-wait", ("time", MathF.Floor(value)));
            _timer = value;
        }
    }
}
